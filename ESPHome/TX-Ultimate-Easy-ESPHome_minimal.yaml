####################################################################################################
#####                              TX Ultimate Easy for ESPHome                                #####
#####                  Repository: https://github.com/edwardtfn/TX-Ultimate-Easy               #####
####################################################################################################
##### Purpose: ESPHome Minimal - Events with Custom Script Hooks                                #####
####################################################################################################
##### Author: edwardtfn - https://github.com/edwardtfn - https://buymeacoffee.com/edwardfirmo  #####
####################################################################################################
##### NOTE:                                                                                    #####
##### - This version allows device YAML to define custom scripts that get called on touch events #####
##### - No configuration entities are exposed to Home Assistant                               #####
##### - No automatic relay triggering - all actions must be defined in device YAML            #####
##### - Configuration is done via ESPHome substitutions in device YAML                        #####
####################################################################################################
---
substitutions:
  name: tx-ultimate-easy
  friendly_name: TX Ultimate Easy
  
  # Configuration - Set these in your device YAML
  gang_count: '1'  # Number of buttons (1-4)
  model_format: 'EU'  # 'EU' or 'US' - affects swipe direction mapping
  enable_led_feedback: 1  # Enable/disable LED feedback on touch events (1=true, 0=false)
  
  # Version info
  version: '2024.12.1'
  
  # Event name for Home Assistant
  EVENT_NAME: esphome.tx_ultimate_easy
  
  # No script substitutions needed - using direct automations

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  comment: TX Ultimate Easy - Minimal Events Only
  project:
    name: "edwardtfn.tx_ultimate_easy"
    version: ${version}
  platformio_options:
    build_flags:
      - -D TX_ULTIMATE_EASY_MINIMAL
  on_boot:
    - priority: 700
      then:
        - lambda: |-
            ESP_LOGI("minimal", "TX Ultimate Easy Minimal - Starting up");
            ESP_LOGI("minimal", "Gang count: ${gang_count}");
            ESP_LOGI("minimal", "Model format: ${model_format}");
            // Initialize touch panel
            sw_touch_panel_power->turn_on();
            // Set gang count
            tx_ultimate->set_gang_count(${gang_count});
        - script.execute: initialize_relays

esp32:
  board: esp32dev
  flash_size: 8MB
  framework:
    type: esp-idf

wifi:
  id: wifi_component

api:
  id: api_server

ota:
  platform: esphome

logger:
  level: VERBOSE


# External component - the C++ touch handler
external_components:
  - source:
      type: git
      url: https://github.com/arieltl/TX-Ultimate-Easy
      ref: main
    refresh: 1min
    components:
      - tx_ultimate_easy

# UART communication with touch controller
uart:
  - id: uart_touch
    tx_pin: GPIO19
    rx_pin: GPIO22
    baud_rate: 115200

# Touch panel power control and relays
switch:
  - id: sw_touch_panel_power
    name: Touch panel - Power
    platform: gpio
    pin:
      number: GPIO5
      inverted: true
    restore_mode: ALWAYS_ON
    internal: true  # Hide from Home Assistant

  # Hardware relays (commercial device pins)
  - id: output_relay_1
    name: "Relay 1"
    platform: gpio
    pin: GPIO18
    restore_mode: RESTORE_DEFAULT_OFF
    internal: true  # Hide from Home Assistant by default

  - id: output_relay_2
    name: "Relay 2"
    platform: gpio
    pin: GPIO17
    restore_mode: RESTORE_DEFAULT_OFF
    internal: true  # Hide from Home Assistant by default

  - id: output_relay_3
    name: "Relay 3"
    platform: gpio
    pin: GPIO27
    restore_mode: RESTORE_DEFAULT_OFF
    internal: true  # Hide from Home Assistant by default

  - id: output_relay_4
    name: "Relay 4"
    platform: gpio
    pin: GPIO23
    restore_mode: RESTORE_DEFAULT_OFF
    internal: true  # Hide from Home Assistant by default

# LED strip configuration
light:
  - id: light_full
    name: "TX Ultimate LEDs"
    platform: esp32_rmt_led_strip
    chipset: ws2812
    pin: GPIO13
    num_leds: 32
    rgb_order: GRB
    max_refresh_rate: 33ms
    restore_mode: RESTORE_DEFAULT_OFF
    internal: false  # Expose to Home Assistant
    default_transition_length: 20ms  # Instant transitions for touch feedback
    effects:
      - pulse:
          name: "Pulse"
          transition_length: 1s
          update_interval: 16ms
      - strobe:
          name: "Strobe"
          colors:
            - red: 100%
              duration: 100ms
            - green: 100%
              duration: 100ms
            - blue: 100%
              duration: 100ms

# Relay initialization script
script:
  - id: initialize_relays
    mode: restart
    then:
      - lambda: |-
          uint8_t gang_count = ${gang_count};
          ESP_LOGI("minimal", "Initializing %d relay(s) based on gang count", gang_count);
          
          // Enable relays based on gang count
          if (gang_count >= 1) {
            output_relay_1->set_internal(false);
            ESP_LOGI("minimal", "Relay 1 enabled");
          }
          if (gang_count >= 2) {
            output_relay_2->set_internal(false);
            ESP_LOGI("minimal", "Relay 2 enabled");
          }
          if (gang_count >= 3) {
            output_relay_3->set_internal(false);
            ESP_LOGI("minimal", "Relay 3 enabled");
          }
          if (gang_count >= 4) {
            output_relay_4->set_internal(false);
            ESP_LOGI("minimal", "Relay 4 enabled");
          }

# Main touch component - this is where the magic happens
tx_ultimate_easy:
  id: tx_ultimate
  uart: uart_touch
  custom_long_click_threshold: 300  # 300ms for faster long click detection
  
  # Configure gang count from substitution
  gang_count: ${gang_count}

  # Touch press event - default behavior (can be overridden in device YAML)
  on_press:
    then:
      - lambda: |-
          ESP_LOGI("minimal", "Touch pressed - Button: %d, Position: %d (default)", touch.button, touch.x);

  # Touch release event - default behavior (can be overridden in device YAML)
  on_release:
    then:
      - lambda: |-
          ESP_LOGI("minimal", "Touch released - Button: %d, Position: %d (default)", touch.button, touch.x);

  # Long touch release event - default behavior (can be overridden in device YAML)
  on_long_touch_release:
    then:
      - lambda: |-
          ESP_LOGI("minimal", "Hardware long touch released - Button: %d, Position: %d (default)", touch.button, touch.x);

  # Custom click detection - default behavior (can be overridden in device YAML)
  on_custom_click:
    then:
      - lambda: |-
          ESP_LOGI("minimal", "Custom click detected - Button: %d, Position: %d (default)", touch.button, touch.x);
      - if:
          condition:
            lambda: |-
              return ${enable_led_feedback};
          then:
            - light.turn_on:
                id: light_full
                red: 100%
                green: 100%
                blue: 100%
                brightness: 50%
            - delay: 100ms
            - light.turn_off: light_full

  # Custom long click detection - default behavior (can be overridden in device YAML)
  on_custom_long_click:
    then:
      - lambda: |-
          ESP_LOGI("minimal", "Custom long click detected - Button: %d, Position: %d (default)", touch.button, touch.x);
      - if:
          condition:
            lambda: |-
              return ${enable_led_feedback};
          then:
            - light.turn_on:
                id: light_full
                red: 100%
                green: 65%
                blue: 0%
                brightness: 50%
            - delay: 300ms
            - light.turn_off: light_full

  # Swipe left event - default behavior (can be overridden in device YAML)
  on_swipe_left:
    then:
      - lambda: |-
          ESP_LOGI("minimal", "Swipe left detected - Position: %d (default)", touch.x);
      - if:
          condition:
            lambda: |-
              return ${ enable_led_feedback};
          then:
            - light.turn_on:
                id: light_full
                red: 0%
                green: 100%
                blue: 100%
                brightness: 50%
            - delay: 150ms
            - light.turn_off: light_full

  # Swipe right event - default behavior (can be overridden in device YAML)
  on_swipe_right:
    then:
      - lambda: |-
          ESP_LOGI("minimal", "Swipe right detected - Position: %d (default)", touch.x);
      - if:
          condition:
            lambda: |-
              return ${enable_led_feedback};
          then:
            - light.turn_on:
                id: light_full
                red: 100%
                green: 0%
                blue: 100%
                brightness: 50%
            - delay: 150ms
            - light.turn_off: light_full

  # Multi-touch event - default behavior (can be overridden in device YAML)
  on_multi_touch_release:
    then:
      - lambda: |-
          ESP_LOGI("minimal", "Multi-touch released - Position: %d (default)", touch.x);
      - if:
          condition:
            lambda: |-
              return ${enable_led_feedback};
          then:
            - light.turn_on:
                id: light_full
                red: 50%
                green: 0%
                blue: 50%
                brightness: 50%
            - delay: 200ms
            - light.turn_off: light_full

  # Generic touch event - fires for all touch events (for debugging)
  on_touch_event:
    then:
      - lambda: |-
          ESP_LOGD("minimal", "Touch event - State: %s, Button: %d, Position: %d", 
                   touch.state_str.c_str(), touch.button, touch.x);

# Boot sequence is now handled in the main esphome section above

# Optional: Send events to Home Assistant
# Uncomment the sections below if you want to send events to Home Assistant

# script:
#   - id: send_ha_event
#     mode: restart
#     parameters:
#       event_type: string
#       data: string
#     then:
#       - homeassistant.event:
#           event: ${EVENT_NAME}
#           data: !lambda return data;

# Then modify the custom scripts above to also call:
# - script.execute:
#     id: send_ha_event
#     event_type: "touch_press"
#     data: !lambda |-
#       return "{\"button\":" + std::to_string(touch.button) + 
#              ",\"position\":" + std::to_string(touch.x) + 
#              ",\"state\":\"" + touch.state_str + "\"}";
