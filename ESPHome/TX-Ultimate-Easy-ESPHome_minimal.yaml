####################################################################################################
#####                              TX Ultimate Easy for ESPHome                                #####
#####                  Repository: https://github.com/edwardtfn/TX-Ultimate-Easy               #####
####################################################################################################
##### Purpose: ESPHome Minimal - Events with Custom Script Hooks                                #####
####################################################################################################
##### Author: edwardtfn - https://github.com/edwardtfn - https://buymeacoffee.com/edwardfirmo  #####
####################################################################################################
##### NOTE:                                                                                    #####
##### - This version allows device YAML to define custom scripts that get called on touch events #####
##### - No configuration entities are exposed to Home Assistant                               #####
##### - No automatic relay triggering - all actions must be defined in device YAML            #####
##### - Configuration is done via ESPHome substitutions in device YAML                        #####
####################################################################################################
---
substitutions:
  name: tx-ultimate-easy
  friendly_name: TX Ultimate Easy
  
  # Configuration - Set these in your device YAML
  gang_count: '1'  # Number of buttons (1-4)
  model_format: 'EU'  # 'EU' or 'US' - affects swipe direction mapping
  enable_led_feedback: 1  # Enable/disable LED feedback on touch events (1=true, 0=false)
  enable_haptic_feedback: 1  # Enable/disable haptic feedback on touch events (1=true, 0=false)
  haptic_duration: 15  # Haptic feedback duration in milliseconds (1-500)
  enable_media_player: 1  # Enable/disable media player functionality (1=true, 0=false)
  media_player_volume: 100  # Initial media player volume (0-100)
  
  # Version info
  version: '2024.12.1'
  
  # Event name for Home Assistant
  EVENT_NAME: esphome.tx_ultimate_easy
  
  # No script substitutions needed - using direct automations

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  comment: TX Ultimate Easy - Minimal Events Only
  project:
    name: "edwardtfn.tx_ultimate_easy"
    version: ${version}
  platformio_options:
    build_flags:
      - -D TX_ULTIMATE_EASY_MINIMAL
  on_boot:
    - priority: 700
      then:
        - lambda: |-
            ESP_LOGI("minimal", "TX Ultimate Easy Minimal - Starting up");
            ESP_LOGI("minimal", "Gang count: ${gang_count}");
            ESP_LOGI("minimal", "Model format: ${model_format}");
            ESP_LOGI("minimal", "LED feedback: ${enable_led_feedback}");
            ESP_LOGI("minimal", "Haptic feedback: ${enable_haptic_feedback}");
            ESP_LOGI("minimal", "Haptic duration: ${haptic_duration}ms");
            ESP_LOGI("minimal", "Media player: ${enable_media_player}");
            ESP_LOGI("minimal", "Media player volume: ${media_player_volume}%");
            // Initialize touch panel
            sw_touch_panel_power->turn_on();
            // Set gang count
            tx_ultimate->set_gang_count(${gang_count});
        - script.execute: initialize_relays
        - if:
            condition:
              lambda: |-
                return ${enable_media_player};
            then:
              - switch.turn_on: sw_audio_amplifier
              - number.set:
                  id: speaker_volume
                  value: ${media_player_volume}
              - script.execute: sync_initial_volume

esp32:
  board: esp32dev
  flash_size: 8MB
  framework:
    type: esp-idf

wifi:
  id: wifi_component

api:
  id: api_server

ota:
  platform: esphome

logger:
  level: VERBOSE


# External component - the C++ touch handler
external_components:
  - source:
      type: git
      url: https://github.com/arieltl/TX-Ultimate-Easy
      ref: main
    refresh: 1min
    components:
      - tx_ultimate_easy

# UART communication with touch controller
uart:
  - id: uart_touch
    tx_pin: GPIO19
    rx_pin: GPIO22
    baud_rate: 115200

# I2S Audio configuration (if media player enabled)
i2s_audio:
  - id: if_i2s_audio
    i2s_bclk_pin: GPIO2
    i2s_lrclk_pin: GPIO4

# Touch panel power control and relays
switch:
  - id: sw_touch_panel_power
    name: Touch panel - Power
    platform: gpio
    pin:
      number: GPIO5
      inverted: true
    restore_mode: ALWAYS_ON
    internal: true  # Hide from Home Assistant

  # Hardware relays (commercial device pins)
  - id: output_relay_1
    name: "Relay 1"
    platform: gpio
    pin: GPIO18
    restore_mode: RESTORE_DEFAULT_OFF
    internal: true  # Hide from Home Assistant by default

  - id: output_relay_2
    name: "Relay 2"
    platform: gpio
    pin: GPIO17
    restore_mode: RESTORE_DEFAULT_OFF
    internal: true  # Hide from Home Assistant by default

  - id: output_relay_3
    name: "Relay 3"
    platform: gpio
    pin: GPIO27
    restore_mode: RESTORE_DEFAULT_OFF
    internal: true  # Hide from Home Assistant by default

  - id: output_relay_4
    name: "Relay 4"
    platform: gpio
    pin: GPIO23
    restore_mode: RESTORE_DEFAULT_OFF
    internal: true  # Hide from Home Assistant by default

  # Vibration motor for haptic feedback
  - id: sw_vibration_motor
    name: "Vibration Motor"
    platform: gpio
    pin: GPIO21
    restore_mode: ALWAYS_OFF
    internal: true  # Hide from Home Assistant

  # Audio amplifier control (if media player enabled)
  - id: sw_audio_amplifier
    name: "Audio Amplifier"
    platform: gpio
    pin: GPIO26
    restore_mode: RESTORE_DEFAULT_ON
    internal: true  # Hide from Home Assistant

# LED strip configuration
light:
  - id: light_full
    name: "TX Ultimate LEDs"
    platform: esp32_rmt_led_strip
    chipset: ws2812
    pin: GPIO13
    num_leds: 32
    rgb_order: GRB
    max_refresh_rate: 33ms
    restore_mode: RESTORE_DEFAULT_OFF
    internal: false  # Expose to Home Assistant
    default_transition_length: 20ms  # Instant transitions for touch feedback
    effects:
      - pulse:
          name: "Pulse"
          transition_length: 1s
          update_interval: 16ms
      - strobe:
          name: "Strobe"
          colors:
            - red: 100%
              duration: 100ms
            - green: 100%
              duration: 100ms
            - blue: 100%
              duration: 100ms

# Speaker configuration (if media player enabled)
speaker:
  - id: speaker_embedded
    platform: i2s_audio
    dac_type: external
    i2s_dout_pin: GPIO15
    i2s_audio_id: if_i2s_audio
    i2s_comm_fmt: stand_msb
    channel: mono
    timeout: never
    bits_per_sample: 16bit
    sample_rate: 48000
    buffer_duration: 500ms
  - platform: mixer
    id: mixer_speaker_embedded
    output_speaker: speaker_embedded
    source_speakers:
      - id: announcement_speaker_embedded
      - id: media_speaker_embedded
  - platform: resampler
    id: announcement_spk_resampling_input
    output_speaker: announcement_speaker_embedded
  - platform: resampler
    id: media_spk_resampling_input
    output_speaker: media_speaker_embedded

# Media player configuration (if enabled)
media_player:
  - id: mp_media_player
    name: "Media Player"
    platform: speaker
    codec_support_enabled: true
    buffer_size: 250000
    task_stack_in_psram: false
    announcement_pipeline:
      speaker: announcement_spk_resampling_input
      format: WAV
      num_channels: 1
      sample_rate: 48000
    media_pipeline:
      speaker: media_spk_resampling_input
      format: FLAC
      num_channels: 1
      sample_rate: 48000
    internal: false  # Expose to Home Assistant
    on_state:
      then:
        - lambda: |-
            // Check if volume has changed and update number entity
            id(persistent_media_player_volume) = static_cast<uint8_t>(mp_media_player->volume * 100.0f);
            if (id(persistent_media_player_volume) != id(last_media_player_volume)) {
              id(last_media_player_volume) = id(persistent_media_player_volume);
              ESP_LOGD("minimal", "Media player volume changed to %" PRIu8 "%%, updating number entity", id(persistent_media_player_volume));
            }

# Volume control
number:
  - id: speaker_volume
    name: "Speaker Volume"
    platform: template
    max_value: 100
    min_value: 0
    step: 1
    initial_value: ${media_player_volume}
    unit_of_measurement: "%"
    internal: false
    disabled_by_default: false
    entity_category: config
    device_class: sound_pressure
    restore_value: true
    optimistic: true
    set_action:
      then:
        - speaker.volume_set:
            id: speaker_embedded
            volume: !lambda return x/100.0f;

# Global variables for media player
globals:
  - id: last_media_player_volume
    type: uint8_t
    restore_value: false
    initial_value: '100'
  - id: persistent_media_player_volume
    type: uint8_t
    restore_value: true
    initial_value: '100'

# Relay initialization script
script:
  - id: initialize_relays
    mode: restart
    then:
      - lambda: |-
          uint8_t gang_count = ${gang_count};
          ESP_LOGI("minimal", "Initializing %d relay(s) based on gang count", gang_count);
          
          // Enable relays based on gang count
          if (gang_count >= 1) {
            output_relay_1->set_internal(false);
            ESP_LOGI("minimal", "Relay 1 enabled");
          }
          if (gang_count >= 2) {
            output_relay_2->set_internal(false);
            ESP_LOGI("minimal", "Relay 2 enabled");
          }
          if (gang_count >= 3) {
            output_relay_3->set_internal(false);
            ESP_LOGI("minimal", "Relay 3 enabled");
          }
          if (gang_count >= 4) {
            output_relay_4->set_internal(false);
            ESP_LOGI("minimal", "Relay 4 enabled");
          }

  # Haptic feedback script
  - id: vibrate
    mode: restart
    parameters:
      duration: int
    then:
      - switch.turn_on: sw_vibration_motor
      - delay: !lambda return duration;
      - switch.turn_off: sw_vibration_motor

  # Media player volume sync script
  - id: sync_initial_volume
    mode: restart
    then:
      - delay: 2s  # Wait for media player to initialize
      - media_player.volume_set:
          id: mp_media_player
          volume: !lambda |-
            return id(persistent_media_player_volume) / 100.0f;
      - lambda: |-
          id(last_media_player_volume) = id(persistent_media_player_volume);
          ESP_LOGI("minimal", "Initial volume sync: %.1f%% (restored from persistence)", id(persistent_media_player_volume));

# Main touch component - this is where the magic happens
tx_ultimate_easy:
  id: tx_ultimate
  uart: uart_touch
  custom_long_click_threshold: 300  # 300ms for faster long click detection
  
  # Configure gang count from substitution
  gang_count: ${gang_count}

  # Touch press event - default behavior (can be overridden in device YAML)
  on_press:
    then:
      - lambda: |-
          ESP_LOGI("minimal", "Touch pressed - Button: %d, Position: %d (default)", touch.button, touch.x);

  # Touch release event - default behavior (can be overridden in device YAML)
  on_release:
    then:
      - lambda: |-
          ESP_LOGI("minimal", "Touch released - Button: %d, Position: %d (default)", touch.button, touch.x);

  # Long touch release event - default behavior (can be overridden in device YAML)
  on_long_touch_release:
    then:
      - lambda: |-
          ESP_LOGI("minimal", "Hardware long touch released - Button: %d, Position: %d (default)", touch.button, touch.x);

  # Custom click detection - default behavior (can be overridden in device YAML)
  on_custom_click:
    then:
      - lambda: |-
          ESP_LOGI("minimal", "Custom click detected - Button: %d, Position: %d (default)", touch.button, touch.x);
      - if:
          condition:
            lambda: |-
              return ${enable_led_feedback};
          then:
            - light.turn_on:
                id: light_full
                red: 100%
                green: 100%
                blue: 100%
                brightness: 50%
            - delay: 100ms
            - light.turn_off: light_full

  # Custom long click detection - default behavior (can be overridden in device YAML)
  on_custom_long_click:
    then:
      - lambda: |-
          ESP_LOGI("minimal", "Custom long click detected - Button: %d, Position: %d (default)", touch.button, touch.x);
      - if:
          condition:
            lambda: |-
              return ${enable_led_feedback};
          then:
            - light.turn_on:
                id: light_full
                red: 100%
                green: 65%
                blue: 0%
                brightness: 50%
            - delay: 300ms
            - light.turn_off: light_full

  # Swipe left event - default behavior (can be overridden in device YAML)
  on_swipe_left:
    then:
      - lambda: |-
          ESP_LOGI("minimal", "Swipe left detected - Position: %d (default)", touch.x);
      - if:
          condition:
            lambda: |-
              return ${ enable_led_feedback};
          then:
            - light.turn_on:
                id: light_full
                red: 0%
                green: 100%
                blue: 100%
                brightness: 50%
            - delay: 150ms
            - light.turn_off: light_full

  # Swipe right event - default behavior (can be overridden in device YAML)
  on_swipe_right:
    then:
      - lambda: |-
          ESP_LOGI("minimal", "Swipe right detected - Position: %d (default)", touch.x);
      - if:
          condition:
            lambda: |-
              return ${enable_led_feedback};
          then:
            - light.turn_on:
                id: light_full
                red: 100%
                green: 0%
                blue: 100%
                brightness: 50%
            - delay: 150ms
            - light.turn_off: light_full

  # Multi-touch event - default behavior (can be overridden in device YAML)
  on_multi_touch_release:
    then:
      - lambda: |-
          ESP_LOGI("minimal", "Multi-touch released - Position: %d (default)", touch.x);
      - if:
          condition:
            lambda: |-
              return ${enable_led_feedback};
          then:
            - light.turn_on:
                id: light_full
                red: 50%
                green: 0%
                blue: 50%
                brightness: 50%
            - delay: 200ms
            - light.turn_off: light_full

  # Generic touch event - fires for all touch events (for debugging)
  on_touch_event:
    then:
      - lambda: |-
          ESP_LOGD("minimal", "Touch event - State: %s, Button: %d, Position: %d", 
                   touch.state_str.c_str(), touch.button, touch.x);

# Boot sequence is now handled in the main esphome section above

# Optional: Send events to Home Assistant
# Uncomment the sections below if you want to send events to Home Assistant

# script:
#   - id: send_ha_event
#     mode: restart
#     parameters:
#       event_type: string
#       data: string
#     then:
#       - homeassistant.event:
#           event: ${EVENT_NAME}
#           data: !lambda return data;

# Then modify the custom scripts above to also call:
# - script.execute:
#     id: send_ha_event
#     event_type: "touch_press"
#     data: !lambda |-
#       return "{\"button\":" + std::to_string(touch.button) + 
#              ",\"position\":" + std::to_string(touch.x) + 
#              ",\"state\":\"" + touch.state_str + "\"}";
